@Library('jenkins-shared-libraries') _

// Aborts previous builds of the same PR-
if( env.BRANCH_NAME != null && env.BRANCH_NAME != "master" ) {
  def buildNumber = env.BUILD_NUMBER as int
  if (buildNumber > 1) milestone(buildNumber - 1)
  milestone(buildNumber)
}

pipeline {

  agent {
    kubernetes (jnlp.docker(name: "nuscenes-builder",
                            cpu: 2, maxcpu: 2,
                            memory: "2G", maxmemory: "4G",
                            cloud: "boston"))
  } // agent

  environment {
    PROD_IMAGE = "nuscenes:production"
    TEST_IMAGE_3_6 = "registry-local.nutonomy.team:5000/nuscenes-test:kube36${UUID.nameUUIDFromBytes(new String(env.BUILD_TAG).getBytes())}"
    TEST_IMAGE_3_7 = "registry-local.nutonomy.team:5000/nuscenes-test:kube37${UUID.nameUUIDFromBytes(new String(env.BUILD_TAG).getBytes())}"
    NUSCENES = "/data/sets/nuscenes"
    NUIMAGES = "/data/sets/nuimages"
    PYTHONPATH = "${env.WORKSPACE}/python-sdk"
  }

  stages {
    stage('Build'){
      failFast true
      parallel  {
        stage('Build 3.6') {
          steps {
            container('docker') {
              // Build the Docker image, and then run python -m unittest inside
              // an activated Conda environment inside of the container.
              sh """#!/bin/bash
                set -eux
                docker build --build-arg PYTHON_VERSION=3.6 -t $TEST_IMAGE_3_6 -f setup/Dockerfile .
                docker push $TEST_IMAGE_3_6
              """
            } // container
          } // steps
        } // stage
        stage('Build 3.7') {
          steps {
            container('docker') {
              // Build the Docker image, and then run python -m unittest inside
              // an activated Conda environment inside of the container.
              sh """#!/bin/bash
                set -eux
                docker build --build-arg PYTHON_VERSION=3.7 -t $TEST_IMAGE_3_7 -f setup/Dockerfile .
                docker push $TEST_IMAGE_3_7
              """
            } // container
          } // steps
        } // stage
      }
    }

    stage('Tests') {
      failFast true
      parallel  {
        stage('Test 3.6') {
          agent {
            kubernetes (jnlp.docker(name: "nuscenes-test3.6",
                                    docker_image: env.TEST_IMAGE_3_6,
                                    cpu: 7, maxcpu: 8,
                                    memory: "8G", maxmemory: "30G",
                                    cloud: "boston",
                                    yaml: """spec:
  containers:
  - name: docker
    volumeMounts:
      - mountPath: /data/
        name: nudeep-ci
        subPath: data
  volumes:
  - name: nudeep-ci
    persistentVolumeClaim:
      claimName: nudeep-ci"""))
          } // agent

          steps {
            container('docker') {
              sh """#!/bin/bash
                set -e
                source activate nuscenes && python -m unittest discover python-sdk
                bash setup/test_tutorial.sh
              """
            } // container
          } // steps
        } // stage

        stage('Test 3.7') {
          agent {
            kubernetes (jnlp.docker(name: "nuscenes-test3.7",
                                    docker_image: env.TEST_IMAGE_3_7,
                                    cpu: 7, maxcpu: 8,
                                    memory: "8G", maxmemory: "30G",
                                    cloud: "boston",
                                    yaml: """spec:
  containers:
  - name: docker
    volumeMounts:
      - mountPath: /data/
        name: nudeep-ci
        subPath: data
  volumes:
  - name: nudeep-ci
    persistentVolumeClaim:
      claimName: nudeep-ci"""))
          } // agent

          steps {
            container('docker') {
              sh """#!/bin/bash
                set -e
                source activate nuscenes && python -m unittest discover python-sdk
                bash setup/test_tutorial.sh
              """
            } // container
          } // steps
        } // stage
      } // parallel
    } // stage

    stage('Deploy') {
      when {
        branch 'master'
      }

      steps {
        // TODO: determine where to deploy Docker images.
        container('docker'){
          withCredentials([[
              $class: 'AmazonWebServicesCredentialsBinding',
              credentialsId: 'aws-ecr-staging',
          ]]){
              sh """#!/bin/bash
              echo 'Tagging docker image as ready for production.  For now, this stage of the pipeline does nothing.'
              # docker build -t $PROD_IMAGE .
              # docker push $PROD_IMAGE
              """
          }
        } // container('docker')
      } //steps
    } // stage('Deploy')
  } // stages

  post {
    // only clean up if the build was successful; this allows us to debug failed builds
    success {
        // sh """git clean -fdx"""
        slackSend channel: "#nuscenes-ci", token: "bWyF0sJAVlMPOTs2lUTt5c2N", color: "#00cc00", message: """Success ${env.JOB_NAME} #${env.BUILD_NUMBER} [${env.CHANGE_AUTHOR}] (<${env.BUILD_URL}|Open>)
${env.CHANGE_BRANCH}: ${env.CHANGE_TITLE}"""
    }
    aborted {
        slackSend channel: "#nuscenes-ci", token: "bWyF0sJAVlMPOTs2lUTt5c2N", color: "#edb612", message: """Aborted ${env.JOB_NAME} #${env.BUILD_NUMBER} [${env.CHANGE_AUTHOR}] (<${env.BUILD_URL}|Open>)
${env.CHANGE_BRANCH}: ${env.CHANGE_TITLE}"""
    }
    failure {
        slackSend channel: "#nuscenes-ci", token: "bWyF0sJAVlMPOTs2lUTt5c2N", color: "#c61515", message: """Failed ${env.JOB_NAME} #${env.BUILD_NUMBER} [${env.CHANGE_AUTHOR}] (<${env.BUILD_URL}|Open>)
${env.CHANGE_BRANCH}: ${env.CHANGE_TITLE}"""
    }
    //changed {
        // only run if the current Pipeline run has a different status from previously completed Pipeline
    //}
  } // post

} // Pipeline
